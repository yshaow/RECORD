1.css预处理器
》css预处理器定义了一种新的语言  其基本思想是用一种专门的编程语言 为css添加了一些编程的特性 将css作为目标生成文件
》css预处理器常用：sass(scss) less stylus
》sass与scss其实是同一种东西 其区别：
    》文件拓展名不同 sass是以.sass后缀为扩展名 而scss是以.scss后缀为扩展名
    》语法书写方式不同 sass是以严格的缩进式语法规则来书写 不带大括号"{}"和分号";"
    而scss的语法书写和我们的css语法方式非常类似
2.sass安装
    》ruby安装  http://rubyinstaller.org/downloads sass是基于ruby的  检查 ruby -v
    》在ruby的窗口中运行gem install sass   http://rubygems.org/gems/sass 检查 sass -v
    》更新sass  gem update sass
    》卸载sass  gem uninstall sass
3.sass的语法格式
    即sass的最初语法格式 它是通过tab键控制缩进的一种语法规则 而且这种缩进要求非常严格 另外不带有任何的分号和大括号  常常
    把这种格式称为sass老版本 其文件名以".sass"为扩展名
    如：
    css：
        body {
          font: 100% Helvetica, sans-serif;
          color: #333;
        }
     sass：
        $font-stack: Helvetica, sans-serif
        $primary-color: #333
        body
          font: 100% $font-stack
          color: $primary-color
4.scss语法格式
    scss是sass的新语法格式  从外形上来判断它和css长的几乎一模一样 代码都包裹在一对大括号里 并且末尾结束都有一个分号。
    其文件格式常常以".scss"为扩展名
    如：
	body {
	  font: 100% Helvetica, sans-serif;
	  color: #333;
	}
	$font-stack: Helvetica, sans-serif;
	$primary-color: #333;
	body {
	  font: 100% $font-stack;
	  color: $primary-color;
	}
	注意：'.sass'只能使用sass老语法规则 --缩进规则
	      '.scss'使用的是sass的新语法规则 也就是scss语法规则  类似于css语法格式
	      任何一种语法文件可以直接import导入到另一种语法的文件中使用 只要使用sass-convert命令行工具 就可以将一种语法转换为另一种语法
	      如：
	      sass-convert style.sass style.scss
	      或
	      sass-convert style.scss style.sass
5.sass编译
	》命令编译
		》单文件编译
			sass 要编译的sass文件路径/style.scss:要输出css文件路径/style.css
			如：sass sass/test.scss:css/style.css
		》多文件编译
			sass sass(文件夹)/:css(文件夹)/
			--将sass文件中的所有.scss或.sass文件编译成.css文件到css文件夹中
		》开启watch功能 只要代码进行改变 都能自动检测到代码的变化 并且给你直接编译出来
			sass --watch 要编译的sass文件路径/style.scss:要输出css文件路径/style.css
			如：sass  --watch sass/test.scss:css/style.css 单个文件 监听编译
			如：sass --watch sass:css  多个文件 监听编译
	》gui工具编译
		》Koala (http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html) 
		》CodeKit (http://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html)
	》自动化编译  grunt sass 
6.sass不同样式风格的输出方式
	》嵌套输出方式 nested
		nav {
		  ul {
		    margin: 0;
		    padding: 0;
		    list-style: none;
		  }
		  li { display: inline-block; }
		  a {
		    display: block;
		    padding: 6px 12px;
		    text-decoration: none;
		  }
		}
		******sass --watch test.scss:test.css --style nested*****
		nav ul {
		  margin: 0;
		  padding: 0;
		  list-style: none; }
		nav li {
		  display: inline-block; }
		nav a {
		  display: block;
		  padding: 6px 12px;
		  text-decoration: none; }
	》展开输出方式 expanded  
		sass --watch test.scss:test.css --style expanded
		这个输出的 CSS 样式风格和 nested 类似，****只是大括号在另起一行*****
		nav ul {
		  margin: 0;
		  padding: 0;
		  list-style: none;
		}
		nav li {
		  display: inline-block;
		}
		nav a {
		  display: block;
		  padding: 6px 12px;
		  text-decoration: none;
		}
	》紧凑输出方式 compact 
		sass --watch test.scss:test.css --style compact
		nav ul { margin: 0; padding: 0; list-style: none; }
		nav li { display: inline-block; }
		nav a { display: block; padding: 6px 12px; text-decoration: none; }
	》压缩输出方式 compressed
		sass --watch test.scss:test.css --style compressed
		压缩输出方式会去掉标准的 Sass 和 CSS 注释及空格。也就是压缩好的 CSS 代码样式风格
		nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}
7.sass声明变量
	$(变量声明符)width(变量名称):300px(变量值) !default(表示默认值);
	》普通变量与默认变量
		》普通变量--定义之后可以在全局范围内使用
		$fontSize:12px;
		body{
			font-size:$fontSize;
		}
		编译后：
		body{
			font-size:12px;
		}
		》默认变量--sass的默认变量仅需要在值后面加上!default即可
		$baseLineHeight:1.5 !default;
		body{
			line-height:$baseLineHeight;
		}
		编译后：
		body{
			line-height:1.5;
		}
		默认变量一般是用来设置默认值，然后根据需求来覆盖的 覆盖的方式简单 只需要在默认
		变量**之前或之后**重新声明下变量即可
		$baseLineHeight: 2;
		$baseLineHeight: 1.5 !default;
		body{
		    line-height: $baseLineHeight; //变量调用
		}
		编译后：
		body{
		    line-height:2;
		}
8.sass局部变量和全局变量
	》全局变量--在选择器 函数 混合宏等的外面定义的变量
	如：
	$color:red;//全局变量
	.block{
		color:$color;//调用全局变量
	}
	em{
		$color:red;//定义局部变量
		a{
			color:$color;//调用局部变量
		}
	}
	全局变量：定义在元素外面的变量
	局部变量：定义在元素内部的变量
	注意：局部变量****只会在局部范围内*****覆盖全局变量
9.选择器嵌套
	sass嵌套：
		》选择器嵌套
			<header>
				<nav>
				    <a href=“##”>Home</a>
				    <a href=“##”>About</a>
				    <a href=“##”>Blog</a>
				</nav>
			<header>
			nav a {
			  color:red;
			}
			header nav a {
			  color:green;
			}
			nav {
			  a {
			    color: red;

			    header & {//*********
			      color:green;
			    }
			  }  
			}
		》属性嵌套
			css有一些属性前缀相同，只是后缀不一样 如：border-top border-right
			.box {
			    border-top: 1px solid red;
			    border-bottom: 1px solid green;
			}
			.box {
			  border: {
			   top: 1px solid red;
			   bottom: 1px solid green;
			  }
			}
		》伪类嵌套
			伪类嵌套需要借助"&"符号一起配合使用
			.clearfix:before, .clearfix:after {
			  content: "";
			  display: table;
			}
			.clearfix:after {
			  clear: both;
			  overflow: hidden;
			}
			sass:
			.clearfix{
				&:before,&:after{
					content: "";
					display: table;
				}
				&:after{
					clear: both;
					overflow: hidden;
				}
			}
10.混合宏 --针对大段重复的样式时使用
	》声明混合宏  在sass中 使用@mixin 来声明一个混合宏
		》不带参数混合宏
			@mixin(声明关键词) border-radius(混合宏名称){
				//复用的样式代码
				border-radius:5px;
			}
		》带参数混合宏
			@mixin border-radius($radius:5px){
				border-radius:$radius;
			}
		》复杂的混合宏--添加逻辑关系
			@mixin border-shadow($shadow...){//"..."表示带有多个参数
				@if length($shadow)>=1{//参数的数量值>=1
					@include prefixer(box-shadow,$shadow);
				}@else{
					$shadow:0 0 4px rgba(0,0,0,.3);
					@include prefixer(box-shadow, $shadow);
				}
			}
	》调用混合宏--使用@include关键词 调用已经声明好的混合宏
		如：
		button{
			@include border-radius;
		}
		即：
		button{
			border-radius:5px;
		}
	》混合宏的参数--sass可以传参数
		》传一个不带值的参数
			@mixin border-radius($radius){
				border-radius:$radius;
			}
			》调用时传入一个参数值
			@include border-radius(3px);
		》传一个带值的参数
			@mixin border-radius($radius:3px){//3px是$radius的默认值
				border-radius:$radius;
			}
			@include border-radius;//使用$radius的默认值
			@include border-radius(50%);//使用传入的值
		》传多个参数
			@mixin center($width,$height){
				width:$width;
				height:$height;
				position:absolute;
				top:50%;
				left:50%;
				margin-top:-($height)/2;
				margin-left:-($width)/2;
				
			};
			@include center(500px,300px);
			注意：特别的参数"..."当混合宏传入的参数过多时，用他来替代
			@mixin box-shadow($shadows...){
			  @if length($shadows) >= 1 {
			    -webkit-box-shadow: $shadows;
			    box-shadow: $shadows;
			  } @else {
			    $shadows: 0 0 2px rgba(#000,.25);
			    -webkit-box-shadow: $shadow;
			    box-shadow: $shadow;
			  }
			}
			@include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));
			css：box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);
		》混合宏的不足
			--》生成冗余的代码块
11.扩展(继承)
	在sass中也具有继承，也是继承中的样式代码块 在sass中通过关键词 @extent 来继承已存在的类样式块
	从而实现代码的继承
	//SCSS
	.btn {
	  border: 1px solid #ccc;
	  padding: 6px 10px;
	  font-size: 14px;
	}
	.btn-primary {
	  background-color: #f36;
	  color: #fff;
	  ******@extend .btn;******
	}
	.btn-second {
	  background-color: orange;
	  color: #fff;
	  *******@extend .btn;********
	}
	//CSS
	.btn, .btn-primary, .btn-second {
	  border: 1px solid #ccc;
	  padding: 6px 10px;
	  font-size: 14px;
	}//在sass中的继承 可以继承类样式块中所有样式代码 而且编译出来的css会将选择器合并在一起 形成一个组合选择器
	.btn-primary {
	  background-color: #f36;
	  color: #fff;
	}
	.btn-second {
	  background-clor: orange;
	  color: #fff;
	}
12.占位符 %placeholder
	sass中的占位符****"%名称"****功能是一个很强大 很实用的一个功能 他可以取代以前的css中的基类造成的代码冗余的
	情形，***因为$placeholder声明的代码 如果没有被@extend调用的话 不会产生任何代码
	//SCSS
	%mt5 {
	  margin-top: 5px;
	}
	%pt5{
	  padding-top: 5px;
	}
	.btn {
	  @extend %mt5;
	  @extend %pt5;
	}
	.block {
	  @extend %mt5;

	  span {
	    @extend %pt5;
	  }
	}
	//CSS
	.btn, .block {
	  margin-top: 5px;
	}
	.btn, .block span {
	  padding-top: 5px;
	}
	注意：@extend调用占位符 编译出来的代码会将相同的代码合并在一起 这样可以减少代码冗余
13.混合宏 VS 继承 VS 占位符
	》sass中的混合宏  声明方式：@mixin 调用方式：@include
		》不会自动合并相同的样式代码 如果在样式文件中调用同一个混合宏会产生多个对应的样式代码
		造成代码的冗余
		》不过他可以传参数
		即：如果代码块中涉及到变量  建议使用混合宏来创建相同的代码块
	》sass中继承  声明方式：.class 调用方式：@extend
		》使用继承后  编译出来的css会将使用继承的代码块合并到一起  通过组合选择器的方式向大家展现 比如
		(.mt,.block,.header) 这样编译出来的代码相对于混合宏要干净的多 
		》但是他不能传递变量参数
		即：如果你的代码块不需要传递任何变量参数 而且有一个基类已在文件中存在 建议使用sass继承
	》占位符  声明方式：%placeholder 调用方式：@extend
		占位符与继承其实基本相同 最大的区别：
		占位符是独立定义 不调用的时候是不会在css中产生任何代码  
		继承是首先有一个基类存在 不管调用不调用 基类的样式都将出现在编译出来的css代码中
14.插值 #{}
	使用css预处理器语言的一个主要原因是向使用sass获得一个更好的体系。可以获取更干净 高效的 面向对象的css sass中
	的插值(interpolation)就是重要的一部分
	$properties:(margin,padding);
	@mixin set-value($side,$value){
		@each $prop in $properties{//循环
			#{$prop}-#{$side}:$value;
		}
	}
	.login-box{
		@include set-value(top,14px);
	}
	//css
	.login-box {
	    margin-top: 14px;
	    padding-top: 14px;
	}
	//构建选择器
	@mixin generate-sizes($class, $small, $medium, $big) {
	    .#{$class}-small { font-size: $small; }
	    .#{$class}-medium { font-size: $medium; }
	    .#{$class}-big { font-size: $big; }
	}
	@include generate-sizes("header-text", 12px, 20px, 40px);
	//css
	.header-text-small { font-size: 12px; }
	.header-text-medium { font-size: 20px; }
	.header-text-big { font-size: 40px; }
15.注释
	方式1：/*  */  会在编译出的css中显示
	方式2：//      不会被编译出来
16.数据类型
	》数字 1  10px
	》字符串  有引号字符串或无引号字符串 "foo" 'bar' baz
		》有引号字符串
			如："http://sass-lang.com"
		》无引号字符串
			如：bold
		注意：在编译css文件时不会改变其类型 只有一种情况例外
		使用#{}插值语句时，**有引号字符串**将被编译为**无引号字符串**
		这样方便了在混合指令(mixin)中引用选择器名
	》颜色  blue #000 rgba(0,0,0,.2)
	》布尔型  true false
	》空值  null
	》值列表 用空格或逗号分开 1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif
		所谓值列表是指sass如何处理css中：margin:10px 15px 0 0或者font-face: Helvetica, Arial, sans-serif
		像上面这样通过空格或逗号分隔的一系列的值
		事实上，独立的值也被视为值列表--即只包含一个值的值列表
		sass列表函数赋予了值列表更多的功能：
			》nth函数 可以直接访问值列表中的某一项
			》join函数 可以将多个值列表连接在一起
			》append函数 可以在值列表中添加值
			》@each规则 则能够给值列表中的每个项目添加样式
17.sass的基本特性
	css中能做运算的到目前为止仅有calc()函数可行 但在sass中运算只是其基本特性之一
	》加法--在变量或属性中都可以做加法
		如：.box{
			width:20px +8in;
		}
		.box {
		  width: 788px;
		}
		注意：对于携带**不同类型**的单位时，在sass中计算会报错
	》减法--在变量或属性中都可以做减法
		$full-width: 960px;
		$sidebar-width: 200px;
		.content {
		  width: $full-width -  $sidebar-width;
		}
		.content {
		  width: 760px;
		}
		注意：对于携带**不同类型**的单位时，在sass中计算会报错
	》乘法
		当两个值单位相同时。只需要为一个数值提供单位即可，否则报错
		.box {
		  width: 10px * 2;
		}
		.box {
		  width: 20px;
		}
		注意：对于携带**不同类型**的单位时，在sass中计算会报错
	》除法
		由于"/"在css中有特定的含义 因此在sass中直接使用"/"符号作为除号时，
		将不会生效  我们需要在运算外面添加一个小括号()即可
		.box {
		  width: (100px / 2);  
		}
		.box {
		  width: 50px;
		}
		除了上面情况带有小括号 "/"符号会当做除法运算符之外，如果"/"符号在已有的
		数学表达式中时，也会被认作除法符号如：
		.box {
		  width: 100px / 2 + 2in;  
		}
		.box {
		  width: 242px;
		}
		另外，当变量进行除法运算时，"/"f符号也被自动识别成除法
		$width: 1000px;
		$nums: 10;
		.item {
		  width: $width / 10;  
		}
		.list {
		  width: $width / $nums;
		}
		.item {
		  width: 100px;
		}
		.list {
		  width: 100px;
		}
		注意：在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个
		不带单位的数值如：
		.box {
		  width: (1000px / 100px);
		}
		.box {
		  width: 10;
		}
	》变量计算
		$content-width: 720px;
		$sidebar-width: 220px;
		$gutter: 20px;
		.container {
		  width: $content-width + $sidebar-width + $gutter;
		  margin: 0 auto;
		}
		.container {
		  width: 960px;
		  margin: 0 auto;
		}
	》数字运算
		.box {
		  width: ((220px + 720px) - 11 * 20 ) / 12 ;  //通过括号来改变表达式的优先级
		}
		.box {
		  width: 60px;
		}
	》颜色运算
		所有的算数运算都支持颜色值  并且是分段运算 也就是说 红、绿、蓝各颜色分段单独进行运算
		如：
		p {
		  color: #010203 + #040506;
		}
		计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：
		p {
		  color: #050709;
		}
		注意：算数运算也能将数字和颜色值一起运算 同样也是分段运算的
		如：
		p {
		  color: #010203 * 2;
		}
		计算公式为 01 * 2 = 02、02 * 2 = 04 和 03 * 2 = 06， 并且被合成为：
		p {
		  color: #020406;
		}
	》字符运算
		在sass中可以通过加法符号"+"来对字符串进行连接
		$content: "Hello" + "" + "Sass!";
		.box:before {
		  content: " #{$content} ";
		}
		.box:before {
		  content: " Hello Sass! ";
		}
		注意：如果有引号的字符串被添加了一个没有引号的字符串 也就是带引号的字符串在"+"的左侧 
			结果会是一个有引号的字符串
			同样如果一个没有引号的字符串被添加了一个有引号的字符串 没有引号的字符串在 + 符号左侧
			结果会是一个没有引号的字符串
		p:before {
		  content: "Foo " + Bar;
		  font-family: sans- + "serif";
		}
		p:before {
		  content: "Foo Bar";
		  font-family: sans-serif; 
		}
18.sass的控制命令
	》@if指令是一个sassscript，它可以根据条件来处理样式块。如果条件为true返回一个样式块，反之false
	返回另一个样式块。在Sass中除了@if之外，还可以配合@else if 和@else一起使用
	例如：定义一个混合宏 来控制一个元素隐藏与显示
	@mixin show($show:true){
	  @if $show{
	    display:block;
	  }@else{
	    display:none;
	  }
	}
	.ul{
	  @include show;
	}
	div{
	  @include show(false);
	}
	//css
	.ul {
	  display: block; }

	div {
	  display: none; }
	》@for循环
		在sass的@for循环中有两种方式：
		》@for $i from <start> through <end>
		》@for $i from <start> to <end>
			》$i 表示变量
			》start 表示起始值
			》end 表示结束值
			注意：上述两种方式的区别在于：through表示包括end这个数  而to 则不包括end这个数
		例如：利用@for完成格栅系统
		@for $i from 1 to 13{
		  .col-#{$i}{
		    width:100%/12*$i;
		  }
		}
		@for $i from 1 through 12{
		  .col-#{$i}{
		    width:100%/12*$i;
		  }
		}
		.col-1 {
		  width: 8.33333%; }

		.col-2 {
		  width: 16.66667%; }

		.col-3 {
		  width: 25%; }

		.col-4 {
		  width: 33.33333%; }

		.col-5 {
		  width: 41.66667%; }

		.col-6 {
		  width: 50%; }

		.col-7 {
		  width: 58.33333%; }

		.col-8 {
		  width: 66.66667%; }

		.col-9 {
		  width: 75%; }

		.col-10 {
		  width: 83.33333%; }

		.col-11 {
		  width: 91.66667%; }

		.col-12 {
		  width: 100%; }
	》@while循环
		@while指令也需要SassScript表达式 并且生成不同的样式块 直到表达式值为false时停止循环
		$type:4;
		$type-width:20px;
		@while $type>0{
		  .while-#{$type}{
		    width:$type-width - $type*5;
		    $type:$type - 1;
		  }
		}
	》@each循环
		@each 循环就是去遍历一个列表 然后从列表中取出对应的值
		@each $var in <list>
		例如：
		$list:a b c;
		@mixin _each{
		  @each $val in $list{
		    .ul_#{$val}{
		      margin:0;
		    }
		  }
		}
		ul{
		  @include _each;
		}
19.函数
	》字符串函数
		》unquote($str)  删除字符串中的引号
		》quote($str) 给字符串添加引号
		$display:block;
		ul{
		  display:quote($display);//只能给字符串添加双引号 而且字符串中间有单引号或空格 需要用单引号或双引号括起来否则报错
		}
		$display:"' block '";
		ul {
		  display: unquote($display);//只能删除字符串最前和最后的引号  无法删除字符串中间的引号 如果字符串没有带引号则返回的是字符串本身
		}
		》To-upper-case();将字符串小写字母转成大写字母
		》To-lower-case();将字符串转成小写字母
		a{
		  text-align: to-upper_case(center);
		  font-weight:to_lower_case(BOLD)
		}
	》数字函数
		percentage($val);将一个不带单位的数转成百分比值  即$val*100%
			》主要是将一个**不带单位**(不能带单位  否则报错)的数字转换成百分比形式
		round($val);四舍五入  可以携带单位的任何数值
		ceil($val);向上取整  可以携带单位的任何数值
		floor($val);向下取整  可以携带单位的任何数值
		abs($val);绝对值  可以携带单位的任何数值
		min($val1,$val2,$valn);取最小值  可以携带单位的任何数值  单位要一致
		max($val1,$val2,$valn);取最大值  可以携带单位的任何数值  单位要一致
		random();获取随机数 [0,1)
	》列表函数
		length($list);返回一个列表的长度值  要求：列表值之间用空格隔开 不能使用逗号  否则函数将报错
		nth($list,$n);返回一个列表中指定的某个标签值  width:nth($list,1);  下表从1开始
		join($list1,$list2,[$separator]);将两个列给连接在一起 变成一个列表  只能将两个列表连接成一个列表 不能多于两个
			$separator默认值 auto   还有comma(逗号)  space(空格)
			join((blue green),(red,orange),comma)
		append($list,$val,[$separator]);将某个值放在$list列表的最后
			$separator默认值 auto   还有comma(逗号)  space(空格)
		zip($lists...);将几个列表结合成一个多维的列表
			zip(1px 2px 3px,solid dashed dotted,green blue red)
			((1px "solid" #008000), (2px "dashed" #0000ff), (3px "dotted" #ff0000))
			注意：***使用Zip()函数  要求每个列表项的数值个数必须相同****
			      每个单一列表的值对应的取值相同位置的值
		index($list,$value);返回一个值在列表中的位置值  **索引从1开始**  没找到该值  返回的false
	》颜色函数
		》RGB
			RGB 颜色只是颜色中的一种表达式，其中 R 是 red 表示红色，G 是 green 表示绿色而 B 是 blue 表示蓝色。
			》rgb($red,$green,$blue);根据红 绿 蓝三个值创建一个颜色
			》rgba($red,$green,$blue,$alpha);根据红绿蓝和透明度值创建一个颜色  主要用来将一个颜色根据透明度转换成rgba颜色
				》rgba($red,$green,$blue,$alpha);

				》rgba($color,$alpha);//css3才可以这样写 但是都有兼容性问题  sass就可以  这种情况用的比较多
			》red($color);从一个颜色中获取其中红色值  
				如：red(#f36);-->255
			》green($color);从一个颜色中获取其中绿色值
			》blue($color);从一个颜色中获取其中蓝色值
			》mix($color-1,$color-2,[$weight]);把两种颜色混合在一起
				将两种颜色根据一定的比例混合在一起 生成另一种颜色
				$color-1,$color-2--》需要合并的颜色
				$weight--》为合并的比例即选择权重 默认值为50% ********其取值范围是0~1*********
				它是每个rgb的百分比来衡量 当然透明度也会有一定的权重
				*****如果指定比例是25%  即第一个颜色所占比例为25% 第二个颜色所占比例为75%*****
				例如：mix(rgba(255, 0, 0, 0.5), #00f) => rgba(63, 0, 191, 0.75)
		》HSL
			》hsl($hue,$saturation,$lightness);//通过色相hue、饱和度saturation、亮度lightness的值****创建一个颜色****
				如：hsl(200,30%,60%)  --》#7aa3b8
			》hsla($hue,$saturation,$lightness,$alpha);//创建一个有透明度的颜色  $alpha透明度
				如：hsla(200,30%,60%,.8)  --》
			
			
			》hue($color);//从一个颜色中获取色相值(hue);
				hue(#7ab)--》195deg
			》saturation($color);//从一个颜色中获取饱和度值saturation
				saturation(#7ab) --》33%
			》lightness($color);//从一个颜色中获取亮度值lightness
				lightness(#7ab) --》60%
			
			
			》adjust-hue($color,$degrees);//通过改变一个颜色的色相值 创建一个新的颜色
				adjust-hue(#f36,150deg) //改变#f36颜色的色相值为150deg -->#33ff66
				$degrees:通常这个度数值是在-360deg至360deg之间  当然也可以是百分数
				如果去掉deg与%的两个数相同 那么计算出来的颜色也会一样

			》lighten($color,$amount);//通过改变颜色的亮度值，让颜色变亮 创建一个新的颜色
				lighten(#f36,50%) //把#f36颜色亮度提高50% -->#fff
			》darken($color,$amount);//通过改变颜色的亮度值，让颜色变暗 创建一个新的颜色
				darken(#f36,50%) //把#f36颜色亮度降低50% -->#33000d
				注意：****$amount 这个亮度值可以是0~1之间 不过常用的一般都是在3%~20%之间****
				当颜色的亮度值接近或大于100% 颜色会变成白色
				当颜色的亮度值接近或小于0时，颜色会变成黑色
			》saturate($color,$amount);//通过改变颜色的饱和度值  让颜色更饱和 从而创建一个新的颜色
				saturate(#f36,50%) //把#f36颜色饱和度提高50%  -->#ff3366
				//在原色饱和度基础上增加50%，超过了100%时按100%计算
			》desaturate($color,$amount);//通过改变颜色的饱和度值 让颜色更少的饱和  从而创建一个新的颜色
				desaturate(#f36,50%) //把#f36颜色饱和度降低50%  -->#cc667f
				//在源饱和度基础上减少50%，小于0时按0计算
			
			》grayscale($color);//将一个颜色变成灰色 相当于desaturate($color,100%);
				该函数会将颜色的饱和度值直接调至0%。一般这个函数能将彩色颜色转换成不同程度的灰色
				 grayscale(#f36) //把#f36颜色变成灰色  -->#999999
			》complement($color);//返回一个补充色 相当于adjust-hue($color,180deg);
				complement(#f36)  -->#33ffcc
			》invert($color);//返回一个反相色 红绿蓝色值倒过来  而透明度不变
				invert(#f36)  -->#00cc99
		》Opacity
			alpha($color)或opacity($color);//获取颜色透明度值
			rgba($color,$alpha);//改变颜色的透明度值 rgba(red,.5)
			opacify($color,$amount)或fade-in($color,$amount);//使颜色更不透明
				$amount--》需要增加的透明度值 其取值范围主要是0~1之间 当透明度值增加到大于1时 按1计算
			transparentize($color,$amount)或fade-out($color,$amount);//使颜色更加透明
				$amount--》需要减少的透明度值  透明度值小于0时  按0计算  表示全透明
		》其他的颜色函数
			adjust-color
			change-color
	》introspection函数
		type-of($val);返回一个值的类型
			返回值：
				》number  数值型
				》string  字符串类型
				》bool  布尔型
				》color  颜色型
		unit($val);返回一个值的单位
		unitless($val);判断一个值是否带有单位  不带单位true  带单位返回的值false
		comparable($val-1,$val-2);判断两个值是否可以做加 减 合并  可以返回true 否则返回false
		comparable(2px,1px);--true
	》三元函数
		Miscellaneous函数：
		if($condition,$if-true,$if-false);//当$condition条件成立时，返回的值为$if-true,否则返回的是$if-false
		width:if(true,1px,2px);
		height:if(false,1px,2px);
	》自定义函数
	
	》Map
		Sass的map常常被称为数据地图，也有人称其为数组，因为他总是以key:value成对出现的，其实他更像一个json数据
		map的定义：
		$map:(//$map--声明map
			$key1:value1,
			$key3:(//map嵌套
				$key3-1:value3-1
			),
			$key2:value2//最后一组键值对没有逗号
		);
		注意：map可以很容易收集键的值和动态的插入
		map的相关函数：
		》map-get($map,$key);根据给定的key值，返回map中相关的值,如果$key不存在$map中 将返回null值
		》map-merge($map1,$map2)将两个map合并成一个新的map，如果要快速的将新值插入到$map中的话 这是最佳方法
			如：
			$color: (
			    text: #f36,
			    link: #f63,
			    border: #ddd,
			    backround: #fff
			);
			$typo:(
			    font-size: 12px,
			    line-height: 1.6
			);
			$newmap: map-merge($color,$typo);
			$newmap:(
			    text: #f36,
			    link: #f63,
			    border: #ddd,
			    background: #fff,
			    font-size: 12px,
			    line-height: 1.6
			);
			注意：如果$map1与$map2中有相同的$key名 那么$map2中的$key会取代$map1中的
		》map-remove($map,$key);从map中删除一个key，返回一个新map
		》map-keys($map);返回map中所有的key,这些值赋予给一个变量 该变量为一个列表
			如：$list: map-keys($social-colors);
		》map-values($map);返回map中所有的value，可以说也将是一个列表 而且map-values($map)中如果有相同的value也将全部获取出来
			map-values($social-colors)
			返回：#ea4c89,#3b5998,#171515,#db4437,#55acee 值与值之前同样用逗号分隔。
		》map-has-key($map,$key);根据给定的key值判断map是否有对应的$key值，如果有返回true 否则返回false
			$social-colors:(
				dribble:#ea4c89,
				facebook:#3b5998,
				github:#171515
			);
			@function colors($colors){
			    @if not map-has-key($social-colors,$colors){
			      @warn "No color found for #{$colors}" in $social-colors map;
			    }
			    @return  map-get($social-colors,$colors);
			};
			@each $key,$val in $social-colors{
			  .btn-#{$key}{
			    color:colors($key);
			  }
			}
			.btn-a{
			  color:colors(a);
			}
		》keywords($args);返回一个函数的参数 这个参数可以动态的设置key与value  它是一个动态的创建map的函数
			可以通过混合宏或函数的参数变创建map
			@mixin map($args...){
			    @debug keywords($args);
			}
			@include map(
			  $dribble: #ea4c89,
			  $facebook: #3b5998,
			  $github: #171515,
			  $google: #db4437,
			  $twitter: #55acee
			);
			或
			@function map($args...){
				@debug keywords($args);
			}
			map(
			  $dribble: #ea4c89,
			  $facebook: #3b5998,
			  $github: #171515,
			  $google: #db4437,
			  $twitter: #55acee
			);
20.Sass的"@"规则
	Sass支持所有的css3的 @ 规则，以及一些sass专属的规则，也称为 "指令" directives
	》 @import
		》Sass扩展了css的 @import规则，让它能够引入scss与sass文件，所有引入的scss和sass文件都会被合并 并输出一个单一
		的css文件。另外 被导入的文件中所定义的变量或mixins都可以在主文件中使用
		》 @import根据文件名引入，默认情况下，它会寻找Sass文件并直接引入，但是，在少数几种情况下，他会被编译成
		Css的 @import规则：
			》如果文件的扩展名是 ".css"
			》如果文件名以 "http://" 开头
			》如果文件名是 "url()"
			》如果 @import包含了任何媒体查询 如：media queries
			注意：如果上述情况都没有出现，并且扩展名是.scss或.sass，该名称的sass或scss文件就会被引入。如果没有扩展名
			sass将试着找出具有.scss或.sass扩展名的同名文件并将其引入
			如： @import "foo.scss"或 @import "foo"--》两者都将引入 foo.scss文件
			     @import "foo.css";
			     @import "foo" screen;
			     @import "http://foo.com/bar";
			     @import url(foo);
			     被编译为：
			     @import "foo.css";
			     @import "foo" screen;
			     @import "http://foo.com/bar";
			     @import url(foo);
			》通过 @import引入多个文件
			     @import "rounded-corners", "text-shadow";
			》如果有一个scss或sass文件需要引入，但是你又不希望它被编译为一个css文件，这时，你就可以在文件名前面加一个下划线
			就能避免被编译，这就告诉sass不要把他编译成css文件。然后你就可以像往常一样引入这个文件了。而且嗨可以省略掉文件名
			前面的下划线
			如：你有一个文件叫做_colors.scss。这样就不会生成_colors.css文件了 @import "colors";//不用加下划线
			注意：在同一个目录下不能同时存在带下划线和不带下划线的同名文件即_colors.scss不能与colors.scss并存
			》嵌套 @import
			虽然大部分时间只需在顶层文件使用 @import就好了，但是 你还可以把他们包含在**css规则**和** @media规则**中
			如：
			example.scss文件：
				.example{color:red;}
			通过 @import引入 example.scss文件：
			#main {
				@import "example";
			}
			编译之后：
			#main .example{
				color:red;
			}
	》 @media
		》Sass中的 @media指令和css的使用规则一样的简单，但是他有另外一个功能，可以嵌套在css规则中；如果在样式中使用 @media
		指令，它将冒泡到外面 
		如：
		.sidebar {
			width: 300px;
			@media screen and (orientation: landscape) {
				width: 500px;
			}
		}
		编译后：
		.sidebar {
			  width: 300px; 
		}
		@media screen and (orientation: landscape) {
		    .sidebar {
				width: 500px; 
		    } 
		}
		》 @media也可嵌套 @metia
		@media screen {
			  .sidebar {
				    @media (orientation: landscape) {
				    //portrait：指定输出设备中的页面可见区域高度大于或等于宽度
				    //landscape：除portrait值情况外，都是landscape 媒体高度小于宽度
				      width: 500px;
				    }
			  }
		}
		编译后：
		@media screen and (orientation: landscape) {
			.sidebar {
				width: 500px; 
			} 
		}
		》使用 @media时，还可以使用插件"#{}"
		$media: screen;
		$feature: -webkit-min-device-pixel-ratio;
		$value: 1.5;

		@media #{$media} and ($feature: $value) {
		  .sidebar {
		    width: 500px;
		  }
		}
		编译后：
		@media screen and (-webkit-min-device-pixel-ratio: 1.5) {
			  .sidebar {
			    width: 500px; 
			  } 
		}
	》 @extend
		Sass中的 @extend是用来扩展选择器或占位符
		.error {
			border: 1px #f00;
			background-color: #fdd;
		}
		.error.intrusion {
			background-image: url("/image/hacked.png");
		}
		.seriousError {
			@extend .error;
			border-width: 3px;
		}
		编译后：
		.error, .seriousError {
			border: 1px #f00;
			background-color: #fdd; 
		}
		.error.intrusion, .seriousError.intrusion {
			background-image: url("/image/hacked.png"); 
		 }
		.seriousError {
			border-width: 3px; 
		 }
		 》 @extend不止扩展类选择器，还可以扩展任何选择器
		 如：
		 a:hover {
			text-decoration: underline;
		 }
		 .hoverlink {
			@extend a:hover;
		 }
		 编译：
		 a:hover, .hoverlink {
			text-decoration: underline;
		 }
		 》多个扩展--所设某个样式要继承多个地方的样式，那么可以使用 @extend 来继承多个选择器或占位符的样式
		.error {
		  border: 1px #f00;
		  background-color: #fdd;
		}
		.attention {
		  font-size: 3em;
		  background-color: #ff0;
		}
		.seriousError {
		  @extend .error;
		  @extend .attention;
		  border-width: 3px;
		}
		编译后：
		.error, .seriousError {
		  border: 1px #f00;
		  background-color: #fdd; 
		}
		.attention, .seriousError {
		  font-size: 3em;
		  background-color: #ff0; 
		}
		.seriousError {
		  border-width: 3px; 
		}
		》扩展单一选择器
		前面知道 %placeholder不使用 @extend显示调用是不会生成任何样式代码。那么在选择器中使用占位符一样
		#context a%extreme {
		  color: blue;
		  font-weight: bold;
		  font-size: 2em;
		}
		这段代码在不调用之前不产生任何代码，只有能过 @extend调用之后才生成代码：
		.notice {
		  @extend %extreme;
		}
		编译后：
		#context a.notice {
		  color: blue;
		  font-weight: bold;
		  font-size: 2em;
		}
	》 @at-root--当选择器嵌套多层之后，想让某个选择器跳出 此时就可以使用 @at-root --》跳出根元素
		.a {
			color: red;
			.b {
				color: orange;

				.c {
					color: yellow;

					@at-root .d {
						color: green;
					}
				}
			}  
		}
		编译后：
		.a {
		  color: red;
		}
		.a .b {
		  color: orange;
		}
		.a .b .c {
		  color: yellow;
		}
		.d {
		  color: green;
		}
	》 @debug--在sass中是用来调试的，当在sass的源码中使用了 @debug指令之后，sass代码在编译出错时，在命令终端会输出你设置的提示bug
		如：
		@debug 10em+20em;
		会输出：
		Line 1 DEBUG:22em;	
	》 @warn--也是用来调试sass的
		@warn "提示语句";
	》 @error
		@error "错误的语句";
20.引用父选择器 & 即通过"&"字符来明确地表示插入指定父选择器
21.交互式 shell 即可以在命令行中测试SassScript的功能
在命令行中输入sass -i 然后输入想要测试的SassScript查看输出结果
**********************sass文档总结*********************
》sass简介
	sass是一个css的扩展 它在css的语法的基础上 允许使用
	变量variables
	嵌套规则nested rules
	混合mixins
	导入inline imports等功能
	使用sass以及compass样式库有助于更好地组织管理样式文件 以及更高效地开发项目
》特色
	完全兼容css3
	在css语言的基础上增加变量variables 嵌套nesting 混合mixins等功能
	通过函数进行颜色值与属性值的运算
	提供 控制指令 等高级功能
	自定义输出格式
》Sass的两种语法格式
	SCSS--Sassy CSS 以.scss作为拓展名
	SASS--缩进语法 以.sass作为拓展名
	注意：任何一种语法的文件可以直接import(导入)到另一种语法的文件中使用 只要使用 sass-convert 命令行工具
	就可以将一种语法转换为另一种语法
	如：
	convert sass to scss
		sass-convert style.sass style.scss
	convert scss to sass 
		sass-convert style.scss style.sass
》使用Sass
	sass的三种使用方式：
		》作为命令行工具
			运行sass：sass input.scss output.css
			监视某个sass文件的改动，并自动编译来更新css： sass --watch input.scss:output.css
			监视整个目录： sass --watch app/sass:public/stylesheets
			使用 sass --help 可以列出整个完整的帮助文档
		》作为独立的Ruby模块
			
		》作为Rack-enabled框架的插件 包括Ruby on Rails与Merb
	注意：无论使用那种方式都需要首先安装 Sass gem
	命令：gem install sass
	若Windows系统 需要先安装 Ruby
》css扩展
	》嵌套规则 nested rules
		sass允许将一个css样式嵌套进另一个样式中，内层样式仅适用于外层样式的选择器范围内--***可以理解为层级选择器***
		如：
		#main{
			color:red;
			.redbox{
				font-size:10px;
			}
		}
		--这有助于避免父选择器重复
	》引用父选择器 "&"
		--有时候需要直接使用嵌套外层的父选择器 如给选择器指定hover样式即伪类选择器时  或许插入指定的父选择器时
		如：
		a{
			&:hover{//使用伪类选择器
			
			}
			body.firefox & {//插入父层选择器
			
			}
		}
		注意：&必须出现在选择器的开头位置 或被添加在父选择器的后面，但&作为后缀时，sass将抛出一个错误
	》嵌套属性
		--css中有一些属性遵循相同的"命名空间"，如font-family font-size font-weight都在font命名空间中，在css中 如果你想在同一个命名空间
		中设置一窜属性 你必须每次都输出来 sass为此提供了一个快捷的方式 只需要输入一次命名空间 然后在其内部嵌套子属性即可
		如：
		.funky{
			font:{
				family:fantasy;
				size:30em;
				weight:bold;
			}
		}
		注意：命名空间也可以有自己的属性值 
		如：
		.funky{
			font:20px/24px fantasy{
				weight:bold;
			}
		}
		编译为：
		.funky {
			font: 20px/24px fantasy;
		        font-weight: bold;
		}
	》占位符选择器 %foo
		--sass支持一种特殊类型的选择器，叫占位符选择器 他们需要在 @extend 指令中使用，当他们单独使用的时候，即没有使用
		@extend 的 使用占位符选择器的规则集将**不会**被渲染为css
》注释
	sass支持标准的css多行注释/* */以及单行注释 // 在尽可能的情况下，**多行注释**会被保留在输出的css中，而**单行注释**会被删除
	如果多行注释的第一个字母是"!"那么注释总是会被保留到输出的css中，即使在压缩输出模式下，这可用于在你生成的css中添加版权声明时
	如：
	$version: "1.2.3";
       /*！ This CSS is generated by My Snazzy Framework version #{$version}. */
》SassScript
	--除了普通的css属性的语法，sass支持一些扩展 名为SassScript，它允许属性使用变量 算术  额外功能 SassScript可以在任何属性值被使用
	SassScript也可以用来生成选择器和属性名称 当编写mixins时非常游泳  这是通过interpolation(插值)完成的
	》交互式 shell Interactive Shell
		Interactive Shell可以在命令行中测试SassScript的功能，在命令行中输入 sass -i，然后输入想要测试的SassScript查看输出结果
		如：
		sass -i
		1px+3
		4px
	》变量 $ variables
		使用SassScript最直接了当的方法就是使用变量 变量以美元符号开始 赋值像设置css属性那样;
		如：$width:5px;
		注意：变量仅在它定义的选择器嵌套层级的范围内可用
		不在任何嵌套选择器内定义的变量则可在任何地方使用
		定义变量的时候可以在后面带上!global标志，在这种情况下，变量在任何地方可用
		如：
		#main{
			$width:5px !global;
		}
		#sidebar {
			width: $width;
		}
		变量名以及其他所有sass标识符可以互换连字符("-"与下划线"_"),即如果你定义了一个名为
		$main-width,你可以使用$main_width访问它 反之亦然
	》数据类型 Data Types
		SassScript支持7种主要的数据类型：
		》数字 如：1.2 13 10px
		》文本字符串  带引号字符串和不带引号字符串 如："foo"  bold
			css指定两种字符串类型：带引号的字符串(单引号或者双引号) 以及不带引号的字符串
			SassScript识别这两种类型的 并且一般来说 在编译输出的css文件中不会改变sass文档中使用的字符串类型
			注意：当使用#{}时，带引号的字符串将被编译为不带引号的字符串
		》颜色 如：blue #000 rgba(255,0,0,.5);
		》布尔值 如:true false
		》空值 如：null
		》值列表 list 用空格或逗号分隔 如：1.5em 1em 3em,Arial
			指sass如何表示在css声明的类似margin:10px 0 0 15px;这样的事，列表只是一串其他值，无论是用空格还是逗号隔开，
			事实上 独立的值也被视为列表：只包含一个值的列表
			注意：除了包含简单的值，列表可包含其他列表 如：1px 2px,5px 6px;包含了1px 2px列表和5px 6px列表两项，如果内外两层
			列表是用相同的分隔符号 你需要是用括号将内层列表括起来 以明确内层类别的开始和结束位置 如：(1px 2px) (5px 6px);
		》maps 从一个值映射到另一个值 如：(key1:value1,key2:value2);
		注意：SassScript也支持其他所有类型的css属性值 如：unicode字符集 或!important声明 
		然而不会对这些类型的属性值做特殊处理 一律视为**不带引号的字符串**
	》运算 Operations
		--所有数据类型都支持相等运算(== 或 !=) 此外每种类型都有其自己特殊的运算方式
		》数字运算
		》布尔运算
			SassScript支持布尔值的 and or  not运算
		》列表运算--数组不支持任何特殊运算   只能使用list函数控制
	》函数
		--SassScript定义了一些有用的函数，这些函数可以像普通css函数语法一样调用
	》插值 #{}
》@ --规则和指令
	@import "a","b";//sass支持在一个 @import 规则中同时导入多个文件
****************Sass与compass*********************
1.compass是sass的二次开发工具
gem sources --remove https://rubygems.org/
gem sources -a https://ruby.taobao.org/
2.compass的简介以及安装--compass-style.org
gem install compass
3.compass创建项目
compass create 项目名称
4.compass实时监听sass文件
compass watch  ctrl+c停掉
注意：如果一个sass文件不需要被编译  但是需要在其他sass文件中引入该文件   我们可以对该文件的名称前面加下划线
5.compass核心模块
 》reset--各浏览器的重置问题(reset 包含12核心宏  即mixin  可以通过 @include调用)--使用方式最简单模块
	如果想用normalize来重置各浏览器的问题  那些请下载 compass-normalize插件  gem install compass-normalize
	然后在添加compass插件出添加compass-normalize插件  即require "compass-normalize"即可
	引入normalize  @import "normalize";
	normalize核心模块：
	》base--统一html body基础样式
	》html5--统一html5新增元素的样式
	》links--统一a标签的样式
	》typography--统一段落文本的样式
	》embeds--统一img svg等样式
	》groups
	》forms--统一表单的样式
	》tables--统一表格的样式
	引入单个模块： @import "normalize/base"即用"/"分隔即可 但是的在之前引入 @import "normalize-version"
	插件 require "compass/import-once/activate"的作用即保证 @import引入文件时 同一文件只引入一次  如果同一文件
	确实需要 @import 引入同一个文件多次时  在后面加"!"即可  即 @import "test!"
 》layout--布局模块--使用率最低模块
	@import "compass/layout"--显示引入
	layout又分为三大模块：
	》grid-background--定义网格的背景
	》sticky-footer--当主题内容不足以占据页面空间时  让footer在窗口底部  当主题内容超过页面空间时  footer在页面底部
	//这需要页面结果满足它对应的结构才行
	@include sticky-footer(30px,"主体结构的选择器 如#my-root","占位结构的选择器 如#my-root-footer","footer的选择器 如#my-footer");
	//30px--footer的高度 选择器名称可改
	》stretching--拉伸子元素占满父元素
	.stretch-full{
		@include stretch(top,right,bottom,left);//调用 即绝对定位  通过top  right bottom left 定义位置
		如果记不住参数顺序可以手动明确定义位置值：
		  @include stretch($offset-top:3px,$offset-bottom:10px,$offset-right:5px,$offset-left:10px);
	}
	引入方式： @import "compass/layout/stretching(xxxx)"
 》css3---跨浏览器的css3模块
	如： @include box-shadow(参数值);//会加入兼容的前缀 提升跨浏览器的能力
 》helpers--包含一系列的函数
	inline-image--base64
	image-url--直接引入img
	fonts-file
	注意：在config配置文件中添加compass的环境即开发环境或者生产环境
	#set the compass compile enviroment
	environment=:production(:development)
 》typography--文本样式
 》utilities--辅助类的样式模块
	
 》browser--用来配置compass默认支持那些浏览器
	@import "compass/support"
	//声明想支持那些浏览器
	$supported-browsers:list值 如：chrome firefox 或者chrome,firefox
	//定义最小浏览器版本
	$browser-minimum-versions ("chrome": null, "firefox": null, "ie": "7", "safari": null, "opera": null)//值需要的是字符串
	命令：compass interactive进入可以查看compass内置函数内容的命令
	如查看 browsers() browser-versions(chrome);
 注意：compass的核心模块只有reset和layout手动指定引入  即 @import "compass/reset(layout)"
       @import "compass"时只包含其他五大模块  却不包含reset和layout模块
 6.更新 ruby命令 gem update --system
 7.编译  compass compile































































