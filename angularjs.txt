http://www.360doc.com/content/14/0414/15/14416931_368816305.shtml
1.angularjs包括：
	》构建一个crud(增查更删)应用可能用到的全部内容：数据绑定 基本模板标识符 表单验证 路由 
							深度链接 组件重用 依赖注入
	》测试方面：单元测试 端对端测试 模拟和自动化测试框架
	》具有目录布局和测试脚本的种子应用作为起点
	*****angularjs主要考虑的是构建crud应用*****
2.<html ng-app>//当加载该页面时，标记ng-app告诉angularjs处理**整个**HTML页并引导应用
	ng-app指令标记了ng脚本的作用域 在<html>添加ng-app说明整个<html>都是ng脚本作用域 当然也可以局部使用ng-app
3.{{}}是ng中用于绑定(数据)表达式用的 --表达式可以是表达式与过滤器的组合  ***过滤器用于对输入输出数据格式化
	这个绑定告诉ng需要运算{{}}中的表达式并将结果插入DOM中，*****ng表达式仅在ng作用域中运行*****
4.ng的双向数据绑定
	》文本输入指令<input ng-model='yourname'/>即把文本输入的内容绑定到一个叫yourname的模型变量中--一个数据绑定方向
	》可以通过{{yourname}}来获取模型变量中的值 并设置到html文档中--另一个数据绑定方向
5.angularjs应用的解析--模型-视图-控制器设计模式(mvc)
	》模板即展现应用的视图，可通过angularjs在html中构建您自己的html标记
	》应用程序逻辑和行为即用js定义的控制器
	》模型数据：
		》模型是ng作用域对象的属性引申，模型中的数据都属于ng作用域对象
		》ng通过作用域来保持数据莫小鱼视图界面ui的双向同步，一旦模型状态发生改变 ng会立即刷新反映在视图界面中，反之亦然。
		》此外 ng还提供了一些有用的服务特性：
			》底层服务包括依赖注入 xhr 缓存 url路由 和浏览器抽象服务
			》还可以扩展和添加自己特定的应用服务
6.ng-repeat ng的迭代器
	如<li ng-repeat="phone in phones"></li>即以li为模板为每个phone创建一个<li>元素
*************************************
1.ng自动初始化
	ng会在DOMContentLoaded事件触发时执行，并通过ng-app指令寻找你的应用根作用域
	如果ng-app找到：ng将会做：
		》载入和指令内容相关的模块
		》创建一个应用的"注入器(injector)"
		注意：以已拥有的ng-app指令的标签为根节点来编译其中的DOM 这使得你可以只指定DOM中的一部分作为你的ng应用
2.ng核心概述
	》启动 startup
	》执行期 runtime
	》作用域 scope 视图与控制器的集合区
	》控制器 controller 应用的行为
	》模型 model 应用的数据
	》视图 view 用户能看到的
	》指令 directives 扩展html语法
	》过滤器 filter 数据本地化
	》注入器 injector 聚合你的应用
	》模块 module 配置注入器
	》$ ng的命名空间 namespace
		注意：为了防止意外的命名冲突，ng为可能冲突的对象名加以前缀"$"，所以请不要在你自己的代码里用"$"前缀
********contentEditable html中的一个属性。设置html的contentEditable='true'时，即可开启该元素的编辑模式。*******

/********************angular*********************/
1.架构概述
angular是一个用html和js或者一个可以编译成js的语言如：Dart或TypeScript，来构建客户端应用的框架。
该框架包括一系列库，有些是核心库 有些是可选库。
angular应用的：用angular扩展语法编写html模块，用组件类管理这些模块，用服务添加应用逻辑，用模块打包发布组件与服务。
通过引导根模块来启动该应用，angular在浏览器中接管 展示应用的内容，并根据我们提供的操作指令响应用户的交互。

》模块 
  angular应用是模块化的，并且angular有自己的模块系统，它被称为angular模块或NgModules。
  每个angular应用至少有一个模块 -- 根模块，习惯命名为AppModule。
  根模块在一些小型应用中可能是唯一的模块，大多数应用汇有很多特性模块，每个模块都是一个内聚的代码块专注于某个应用的领域 工作流 或紧密相关的功能。
  
  angular模块 无论是根模块还是特性模块 都是一个带有@NgModule装饰器的类。
  
  装饰器是用来装饰 js 类的函数，angular有很多装饰器，他们负责把元数据附加到类上。
  
  NgModule是一个装饰器函数 它接受一个用来描述模块属性的元数据对象。其中最重要的属性是：
  》declarations -- 声明本模块中拥有的视图类。angular有三种视图类：组件  指令  管道。
  》exports -- declarations的子集 可用于其他模块的组件模板。
  》imports -- 本模块声明的组件模板 需要的类所在的其他模块
  》providers -- 服务的创建者 并加入到全局服务列表中，可用于应用任何部分
  》bootstrap -- 指定应用的主视图(根组件)，他是所有其他视图的宿主，***只有根模块才能设置bootstrap属性***
  
  示例：
  //app.module.ts
  import {NgModule} from '@angular/core'
  import {BrowserModule} from '@angular/platform-browser'
  
  @NgModule({
  	import:[BrowserModule],
	providers:[Logger],
	declarations:[AppComponent],
	exports:[AppComponent ],
	bootstrap:[AppComponent ]
  });
  
  export class AppModule{}
  //AppComponent 的export语句只是用于演示如何导出，并不是必须的，根模块不需要导出任何东西，因为其他组件不需要导入根模块。
  
  //我们通过引导根模块来启动应用，在开发期间，你通常在一个main.ts文件中引导 AppModule :
  import {enableProdMode} from '@angular/core'
  import {platfromBrowserDynamic} from '@angular/platform-browser-dynamic';
  import {AppModule} from './app/app.module'
  import {enviroment} from './environments/environment'
  
  if(environment.production) enableProdMode();
  
  platformBrowserDynamic().bootstrapModule(AppModule);
》NgModules VS JS 模块
   NgModule是一个带有@NgModule装饰器的类，是angular的基础特性之一。
   
   js也有自己的模块系统，用来管理一组js对象，他与angular的模块系统完全不同 且 完全无关。
   js中每个文件是一个模块，文件中定义的所有对象都从属于哪个模块，通过export关键字 模块可以把他的某些对象声明为公共的。其他
   js模块可以使用import语句来访问这些公共对象。
   
   import {NgModule} from '@angular/core'
   import {AppComponent} from './app.component'
   
   export class AppModule{}
 》angular模块库
   angular提供了一组js模块，可以把它们看做库模块。每个angular库的名字都带有@angular前缀。
   如：
   //导入装饰器
   import {Component} from '@angular/core'
   
   //导入angular模块
   import { BrowserModule } from '@angular/platform-browser';
   
   //使用angular的模块系统
   @NgModule({
   	imports:[BrowserModule],
	exports:[]
   });
   
 》组件
   组件负责控制屏幕上的一个小块区域，称之为 视图。
   我们在类中定义组件的应用逻辑，为视图提供支持，组件通过一些由属性和方法组成的API和视图交互。
   //hero-list.component.ts
   export class HeroListComponent implements OnInit{
   	heroes:Hero[];
	selectedHero:Hero;
	
	constructor(private service:HeroService){}
	
	ngOnInit(){//生命周期钩子
		this.heroes = this.service.getHeroes();
	}
	
	selectHero(hero:Hero){this.selectedHero = hero;}
   }
》模板
     我们通过组件的自带的模板来定义组件视图，模板以HTML形式存在，告诉angular如何渲染组件。
     //hero-list.component.html
	<h2>Hero List</h2>

	<p><i>Pick a hero from the list</i></p>
	<ul>
	<li *ngFor="let hero of heroes" (click)="selectHero(hero)">
	{{hero.name}}
	</li>
	</ul>

	<app-hero-detail *ngIf="selectedHero" [hero]="selectedHero"></app-hero-detail>
    模板除了可以使用像<h2>这样的html元素，还能使用其他元素(angular自己的一些模板语法)。
    
》元数据
    元数据告诉angular如何处理一个类。
    如：HeroListComponent只是一个类，需要我们告诉angular 它是一个组件。
    要告诉angular HeroListComponent是个组件，只要把元数据附加到这个类上即可。
    
    在TypeScript中，我们用装饰器decorator来附加元数据
    @Component({
    	selector:'app-hero-list',//css选择器，它告诉angular在父级html中查找<hero-list>标签，创建并插入该组件。
	templateUrl:'./hero-list.component.html',//组件html模板的模块的相对地址
	providers:[HeroService]//组件所需服务的依赖注入提供商数组，这是在告诉angular该组件的构造函数需要一个HeroService服务，这样组件就可以从服务中获取英雄数据了。
    })
    export class HeroListComponent implements OnInit {
	/* . . . */
    }
    //@Component装饰器 它把紧随其后的类标记为组件类。
    //@Component装饰器能接受一个配置对象，angular会基于这些信息创建和展示组件及其视图。 里面的元数据会告诉angular从哪里获取你为组件指定的主要的构建块。

》数据绑定
   angular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。
   数据绑定的四种形式：
   》绑定值 {{value}}
   》属性绑定 [property] = 'value'
   》事件绑定 (event) = 'handler'
   》双向绑定 [(ng-module)] = 'property'
      双向数据绑定是最重要的，它使用ngModel指定组合了属性绑定和事件绑定的功能
      <input [(ngModel)]="hero.name">
      在双向绑定中，数据属性值通过属性绑定从组件流到输入框，用户的修改通过事件绑定流回组件，把属性值设置为最新的值。
》指令 directive
	









