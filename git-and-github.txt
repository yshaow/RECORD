1.github
	》目的
		借助github托管项目代码
2.windows下安装git
	命令行客户端：cygwin 、 msysGit
	cygwin： 安装  一直next
		git --version 检验是否成功
		cd /cygdrive/d //进入d盘 进入某个盘需要用cygdrive  方案：http://herry2013git.blog.163.com/blog/static/2195680112013437139447/

	msysGit： 安装  一直next
		git bash 在当前目录打开 该工具窗口
		pwd  查看当前所在目录
	图形客户端：TortoiseGit
		安装 选择openSSh客户端
	cygwin与tortoiseGit能够很好的支持中文，msysGit支持中文不好
3.git基本操作
	》配置信息：
		git config --global user.name 'yshaow'
		git config --global user.email yshaow@126.com
	》获取命令帮助
		git help config
	》git初始化--从项目中建立git的版本控制
		//进入项目目录  git初始化 git init
	》git add index.html //让git来跟踪指定文件(index.html)
		//跟踪多个文件 git add Documentation/\*.txt 跟踪Documentation目录下的所有txt文件
		git add的作用：
			》可以用它开始跟踪新文件并且把跟踪文件放入暂存区
			》已经跟踪的文件放入暂存区
			》还能用于合并时把有冲突的文件标记为已解决状态等等
	》git commit -m 'add index html' //把跟踪的index.html提交到版本库中， -m参数作用：指明提交解释信息
		作用：把暂存区的文件放去版本库中
	》git commit -am '注释'//修改之后再工作区的代码 还需要一次使用git add 文件名。才能提交 可以通过命令同时执行add 与 commit
	》git log  //查看提交记录
	》git status //查看当前git版本库的状态
		untracked：没有被跟踪的文件
		unmodified:没有被修改过的
		modified：修改过的
		staged：被暂存的
	》对于没有staged 的文件恢复git checkout -- index.html
	》创建分支
		git branch testing //再当前commit对象上新建一个分支指针testing
	》切换到其他分支
		git checkout testing //切换到testing分支 此时HEAD指针指向testing分支
		git checkout master //该命令把HEAD指针移回master分支，并且把工作目录中的文件换成了master分支所指向的快照内容。
			也就是说现在所做的改动，将始于本项目中一个较老的版本。它的主要作用是将testing分支里作出的修改暂时取消
			这样你就可以向另一个方向进行开发了。
			我们可以在不同分支里面反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，
			仅仅需要branch和checkout这两条命令就可完成。通过最后合并即可。
		注意：切换分支时  尽量保证 工作区的暂存区或者工作目录里的清洁 即切换之前提交
	》创建并切换到某个分支
		git checkout -b iss53 //相当于 git branch iss53 与 git checkout iss53
	》合并
		如：合并到master分支：
			//先进入master分支 git checkout master
			//然后合并hotfix分支  git merge hotfix
			请注意，合并时出现了“Fast forward”（快进）提示。由于当前master 分支所在的commit 
			是要并入的hotfix 分支的直接上游，Git 只需把指针直接右移。换句话说，如果顺着一个分
			支走下去可以到达另一个分支，那么Git 在合并两者时，只会简单地把指针前移，因为没有什
			么分歧需要解决，所以这个过程叫做快进（Fast forward）。
			//**合并之后 master分支和hotfix分支指向同一个位置。**
	》删除某个分支
		git branch -d hotfix
	》git stash
		在某个分支工作到一半不想提交，又要切换到另一个分支上工作，git会阻止切换--**需要保存当前的状态**
		//当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行
		//一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办
		//法就是git stash命令。
		stash 储藏
		git stash （储藏当前状态之后，就能切换到别的分支）
		git stash list (查看储藏状态的列表) stash@{ 0(储藏名)} 
		git stash apply 储藏的名字 （回到原来的分支之后，如何恢复到之前那种混乱的工作状态） 如：git stash apply 0
	》克隆远程仓库
		git clone 仓库url
		默认情况下git clone命令本质上就是自动创建了本地的master分支用于跟踪远程仓库中的master分支。
		打开了项目文件夹/.git/config文件可以看到master分支和远程仓库的master分支的关联
	》添加远程仓库
		git remote add 远程仓库名(一般使用origin) 仓库URL//相当于在本地使用仓库名与仓库url相对应
		这个有利于后面拉取代码与push代码方便，用远程仓库名即可
	》推送数据到远程仓库
		git push -u 远程仓库名 本地推送的分支名
		//推送本地仓库的所有分支到远程仓库
		git push -u 远程仓库名 --all //-u表示建立追踪 这样git status会显示本地分支和远程分支的偏离情况
		//本地的分支名是什么 推送的数据就到远程中所对应的分支名中
		注意：
			只有在所克隆的服务器上有写权限，并且同一时刻没有其他人在推数据，这条命令才会如期
			完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。
			你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。
		git push origin master//把本地的master分支推送给了远程仓库的origin，并且在远程仓库origin中
			创建了一个远程的master分支，远程的master分支和本地的master分支关联
	》git branch -vv 查看本地分支与远程分支的联系
	》关联本地分支与远程分支
		git branch --set-upstream debug(本地分支) origin/debug(远程分支)
	》查看当前远程仓库
		git remote -v
	》git fetch 远程仓库名 //从远程仓库抓取数据
	》把远程仓库的分支数据合并到本地仓库的分支数据
		git merge 远程仓库名/分支名
	》git pull 远程仓库名
		相当于 git fetch 远程仓库名 + git merge 远程仓库名/分支名
	》git branch -a 查看远程分支
	》查看远程仓库信息
		git remote show 远程仓库名
	》远程仓库的重命名
		git remote rename 原名 新名//修改.git/config中的配置
	》远程仓库的删除
		git remote rm 远程仓库名//修改.git/config中的配置
	》回滚
		git reset --hard 19abf5cb98c1d2039ffb89720ad34fd7f0591f15
		》文件从暂存区回退到工作区
			git reset HEAD filename //也可以使用 git reset filename
		》退回版本
			git reset head^ //一个^表示一个版本 可以多个
			或
			git reset head~n//回退n个版本
			》参数
				--soft 代码不会改变 回退到暂存区
				默认值mixed 代码不会改变 回退至工作区
				--hard 代码会回退至上一个版本即代码改变
	》修改远程库地址
		git remote set-url origin https://github.com/yshaow/record.git //修改origin所对应的url
	》当本地初始化一个中心库时(不是通过clone来的)，这是要把本地的东西推送到远程库时，pull数据时将没有权限
		git pull origin master --allow-unrelated-histories//使用该命令可以pull
		//提示为何要合并两个库时：
		press "i"->write your merge message->press "esc"->write":wq"->then press enter,
4.git 基本概念
	》staging area 暂存区，可以设置那些变更要提交到版本库，那些先不提交。 **.git文件下的index中**
	》work area 工作区，工作的地方--**项目目录 除了.git文件**
	》local repository 本地仓库 自己工作电脑上保存版本数据的地方**.git/objects下**
	》remote repository 远程仓库 用git进程操作，为了防止数据再自己电脑上丢失，如错误删除等原因造成了数据丢失
				我们需要备份到远程的服务器上，这个服务器即远程仓库。
5.git 保存数据的原理
	当使用git commit新建一个提交对象前，git会先计算每一个子目录的校验和，然后再git仓库中将这些目录保存为树对象。
	之后git创建的提交对象除了包含相关提交信息以外还包含着指向这个树对象的指针，如此它就可以再将来需要的时候，重
	现此次快照的内容。
6.分支
	git中的分支，其实本质上仅仅是一个指向commit对象的可变指针。git会使用master作为分支的默认名字。再若干次提交后
	你其实已经有了一个指向最后一次提交对象commit的master分支，它再每次提交的时候都会自动向前移动。
	》git如何知道你当前再那个分支上工作？
		git保存着一个名为HEAD的特别指针。再Git中它是一个指向**你正在工作中的本地分支的指针*。运行git branch命令
		仅仅是建立了一个新的分支，但不会自动切换到这个分支中去。
		**每次commit 都会让HEAD指针和当前分支一起向前移动一次。**
	》远程分支
		远程分支是对远程仓库状态的索引。我们可以理解为再远程仓库上文件快照的指针，其实和本地分支的是一样的，不过这
		些分支再远程仓库上。我们用 **远程仓库名/分支名** 表示远程分支
		》远程分支的推送
			git push -u 远程仓库名 本地推送的分支名
		》跟踪远程分支
			》git checkout -b 本地分支名 远程仓库名/分支名//使远程分支与本地分支关联 并且本地的切换到该分支
			  如：git checkout -b test2 origin/test2//新建一个本地分支，然后跟踪关联远程分支 切换工作分支
			》git branch --track [本地分支名] [远程仓库名]/[分支名]
			  如：git branch --track test3 origin/test3 //新建一个本地分支，然后跟踪关联远程分支 不切换工作分支
		》对已经存在的本地分支关联某一个远程分支
			git branch --set-upstream [本地分支名] [远程仓库名]/[分支名] 
7.分支合并
	》解决合并中的冲突
		》手动修改冲突的地方
		》使用 git add 加入缓存区 表示冲突已经解决
		》使用 git commit -m '冲突解决' 提交
	//两个分支的同一文件的不同地方合并,git会自动合并 不会产生冲突
8.Git 的开发者都喜欢以这种方式来开展工作，在**master 分支中保留完全稳定**的代码，即已经发布或即将发布的代码。
  与此同时，他们还有一个名为**develop 专门用于后续的开发**，或仅用于稳定性测试。当然并不是说一定要绝对稳定，
  不过一旦进入某种稳定状态，便可以把它合并到master 里。还有在工作中，把开发任务分解为各个功能或者模块，
  用topic（topic branch主题分支，有又成为feature branch特性分支），实现之后并测试稳定之后，可以合并到其他分支。
9.为什么要用到Git服务器？
  我们都是在自己的电脑上操作。Git版本数据也是保存在自己的电脑上，这其实非常不安全，因为你可能会感染电脑病毒，
  会错误删除文件，危害到了git版本数据。所以我们在本机上保存版本数据，最好的备份方式就是使用git服务器。使用git
  服务器不仅保证数据的安全性，还能够多人共享，多人协同开发项目。
10.协议
	SSH协议：
		》 ssh://[user@]example.com:[:port]/path/to/repo.git/ 
			//可以在URL中设置用户名和端口。默认端口为22
		》 [user@]example.com:[:port]/path/to/repo.git/
			//SCP格式表示法，更简洁。但是非默认端口需要通过其他方式（如主机别名方式）
	GIT协议：
		git://example.com[:port]/path/to/repo.git/
	HTTP[S]协议：
		http[s]://example.com:[port]/path/to/repo.git
			//兼有智能协议和哑协议
	还支持其他协议如FTP,RSYNC(这两种属于哑协议)，SSH和GIT协议属于智能协议。
	两者的区别，我们明白一点就是哑协议：传输速度非常慢，传输进度不可见，不知道什么时候数据传输完成。
	而智能协议，传输速度快，可以看到传输进度。
11.用SSH生成公钥与私钥
	git是分布式的代码管理工具，远程的代码管理是基于ssh的，所以要使用远程的git则需要ssh的配置。
	具体步骤：
		》配置git 的user name 和email：
		  git config --global user.name 'yshaow'
		  git config --global user.email 'yshaow@126.com'
		》生成SSH密钥过程
		  //检查是否已经有了SSH密钥 ：cd ~/.ssh 
		》生成密钥
		  ssh-keygen -t rsa -C 'your email'//-t指定密钥类型 这里使用rsa 默认生成用于SSH-2的RSA密钥 -C 指定所指定的注释，方便用户标识这个密钥
		  //三次回车 密码为空 得到id_rsa 和id_rsa.pub两文件
		》添加密钥到ssh: ssh-add 文件名//指定私钥
		》在github上添加ssh密钥 即添加id_rsa.pub里面的公钥
		》测试ssh公钥是否成功： ssh git@git服务器地址(github.com)






